#include "../../dokan/dokan.h"
#include "../../dokan/fileinfo.h"
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
#include <winbase.h>
#include <string.h>

#define test(v) case v: return L#v;

const WCHAR *CreateDispositionString(ULONG v) {
	switch (v) {
		test(CREATE_NEW);
		test(OPEN_ALWAYS);
		test(CREATE_ALWAYS);
		test(OPEN_EXISTING);
		test(TRUNCATE_EXISTING);
		default: return L"unknown";
	}
}

const WCHAR *ErrorString(DWORD v) {
	switch (v) {
		test(ERROR_SUCCESS);
		test(ERROR_INVALID_FUNCTION);
		test(ERROR_FILE_NOT_FOUND);
		test(ERROR_PATH_NOT_FOUND);
		test(ERROR_TOO_MANY_OPEN_FILES);
		test(ERROR_ACCESS_DENIED);
		test(ERROR_INVALID_HANDLE);
		default: return L"unknown";
	}
}

#undef test

#define test(f) if (v & f) { if (*s != 0) { wcscat_s(s, 256, L"|"); } wcscat_s(s, 256, L#f); }

WCHAR *SecurityInformationString(PSECURITY_INFORMATION p) {
	DWORD v = p ? *p : 0;
	static WCHAR s[256];
	*s = 0;
	test(FILE_SHARE_READ);
	test(OWNER_SECURITY_INFORMATION);
	test(GROUP_SECURITY_INFORMATION);
	test(DACL_SECURITY_INFORMATION);
	test(SACL_SECURITY_INFORMATION);
	test(LABEL_SECURITY_INFORMATION);
	test(ATTRIBUTE_SECURITY_INFORMATION);
	test(SCOPE_SECURITY_INFORMATION);
	test(PROCESS_TRUST_LABEL_SECURITY_INFORMATION);
	test(BACKUP_SECURITY_INFORMATION);
	test(PROTECTED_DACL_SECURITY_INFORMATION);
	test(PROTECTED_SACL_SECURITY_INFORMATION);
	test(UNPROTECTED_DACL_SECURITY_INFORMATION);
	test(UNPROTECTED_SACL_SECURITY_INFORMATION);
	return s;
}

WCHAR *FileAttributesString(DWORD v) {
	static WCHAR s[256];
	*s = 0;
	test(FILE_ATTRIBUTE_ARCHIVE);
	test(FILE_ATTRIBUTE_COMPRESSED);
	test(FILE_ATTRIBUTE_DEVICE);
	test(FILE_ATTRIBUTE_DIRECTORY);
	test(FILE_ATTRIBUTE_ENCRYPTED);
	test(FILE_ATTRIBUTE_HIDDEN);
	test(FILE_ATTRIBUTE_INTEGRITY_STREAM);
	test(FILE_ATTRIBUTE_NORMAL);
	test(FILE_ATTRIBUTE_NOT_CONTENT_INDEXED);
	test(FILE_ATTRIBUTE_NO_SCRUB_DATA);
	test(FILE_ATTRIBUTE_OFFLINE);
	test(FILE_ATTRIBUTE_READONLY);
	test(FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS);
	test(FILE_ATTRIBUTE_RECALL_ON_OPEN);
	test(FILE_ATTRIBUTE_REPARSE_POINT);
	test(FILE_ATTRIBUTE_SPARSE_FILE);
	test(FILE_ATTRIBUTE_SYSTEM);
	test(FILE_ATTRIBUTE_TEMPORARY);
	test(FILE_ATTRIBUTE_VIRTUAL);
	return s;
}

WCHAR *ShareAccessString(ULONG v) {
	static WCHAR s[256];
	*s = 0;
	test(FILE_SHARE_READ);
	test(FILE_SHARE_WRITE);
	test(FILE_SHARE_DELETE);
	return s;
}

WCHAR *DesiredAccessString(ULONG v) {
	static WCHAR s[256];
	*s = 0;
	test(GENERIC_READ);
	test(GENERIC_WRITE);
	test(GENERIC_EXECUTE);
	test(DELETE);
	test(FILE_READ_DATA);
	test(FILE_READ_ATTRIBUTES);
	test(FILE_READ_EA);
	test(READ_CONTROL);
	test(FILE_WRITE_DATA);
	test(FILE_WRITE_ATTRIBUTES);
	test(FILE_WRITE_EA);
	test(FILE_APPEND_DATA);
	test(WRITE_DAC);
	test(WRITE_OWNER);
	test(SYNCHRONIZE);
	test(FILE_EXECUTE);
	test(STANDARD_RIGHTS_READ);
	test(STANDARD_RIGHTS_WRITE);
	test(STANDARD_RIGHTS_EXECUTE);
	return s;
}

WCHAR *FlagString(ULONG v) {
	static WCHAR s[256];
	*s = 0;
	test(FILE_ATTRIBUTE_ARCHIVE);
	test(FILE_ATTRIBUTE_COMPRESSED);
	test(FILE_ATTRIBUTE_DEVICE);
	test(FILE_ATTRIBUTE_DIRECTORY);
	test(FILE_ATTRIBUTE_ENCRYPTED);
	test(FILE_ATTRIBUTE_HIDDEN);
	test(FILE_ATTRIBUTE_INTEGRITY_STREAM);
	test(FILE_ATTRIBUTE_NORMAL);
	test(FILE_ATTRIBUTE_NOT_CONTENT_INDEXED);
	test(FILE_ATTRIBUTE_NO_SCRUB_DATA);
	test(FILE_ATTRIBUTE_OFFLINE);
	test(FILE_ATTRIBUTE_READONLY);
	test(FILE_ATTRIBUTE_REPARSE_POINT);
	test(FILE_ATTRIBUTE_SPARSE_FILE);
	test(FILE_ATTRIBUTE_SYSTEM);
	test(FILE_ATTRIBUTE_TEMPORARY);
	test(FILE_ATTRIBUTE_VIRTUAL);
	test(FILE_FLAG_WRITE_THROUGH);
	test(FILE_FLAG_OVERLAPPED);
	test(FILE_FLAG_NO_BUFFERING);
	test(FILE_FLAG_RANDOM_ACCESS);
	test(FILE_FLAG_SEQUENTIAL_SCAN);
	test(FILE_FLAG_DELETE_ON_CLOSE);
	test(FILE_FLAG_BACKUP_SEMANTICS);
	test(FILE_FLAG_POSIX_SEMANTICS);
	test(FILE_FLAG_OPEN_REPARSE_POINT);
	test(FILE_FLAG_OPEN_NO_RECALL);
	test(SECURITY_ANONYMOUS);
	test(SECURITY_IDENTIFICATION);
	test(SECURITY_IMPERSONATION);
	test(SECURITY_DELEGATION);
	test(SECURITY_CONTEXT_TRACKING);
	test(SECURITY_EFFECTIVE_ONLY);
	test(SECURITY_SQOS_PRESENT);
	return s;
}

#undef test
